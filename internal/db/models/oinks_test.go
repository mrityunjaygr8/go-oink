// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOinks(t *testing.T) {
	t.Parallel()

	query := Oinks()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOinksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Oink{}
	if err = randomize.Struct(seed, o, oinkDBTypes, true, oinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Oink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Oinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOinksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Oink{}
	if err = randomize.Struct(seed, o, oinkDBTypes, true, oinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Oink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Oinks().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Oinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOinksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Oink{}
	if err = randomize.Struct(seed, o, oinkDBTypes, true, oinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Oink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OinkSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Oinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOinksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Oink{}
	if err = randomize.Struct(seed, o, oinkDBTypes, true, oinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Oink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OinkExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Oink exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OinkExists to return true, but got false.")
	}
}

func testOinksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Oink{}
	if err = randomize.Struct(seed, o, oinkDBTypes, true, oinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Oink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	oinkFound, err := FindOink(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if oinkFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOinksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Oink{}
	if err = randomize.Struct(seed, o, oinkDBTypes, true, oinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Oink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Oinks().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOinksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Oink{}
	if err = randomize.Struct(seed, o, oinkDBTypes, true, oinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Oink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Oinks().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOinksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	oinkOne := &Oink{}
	oinkTwo := &Oink{}
	if err = randomize.Struct(seed, oinkOne, oinkDBTypes, false, oinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Oink struct: %s", err)
	}
	if err = randomize.Struct(seed, oinkTwo, oinkDBTypes, false, oinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Oink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = oinkOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = oinkTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Oinks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOinksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	oinkOne := &Oink{}
	oinkTwo := &Oink{}
	if err = randomize.Struct(seed, oinkOne, oinkDBTypes, false, oinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Oink struct: %s", err)
	}
	if err = randomize.Struct(seed, oinkTwo, oinkDBTypes, false, oinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Oink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = oinkOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = oinkTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Oinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func oinkBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Oink) error {
	*o = Oink{}
	return nil
}

func oinkAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Oink) error {
	*o = Oink{}
	return nil
}

func oinkAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Oink) error {
	*o = Oink{}
	return nil
}

func oinkBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Oink) error {
	*o = Oink{}
	return nil
}

func oinkAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Oink) error {
	*o = Oink{}
	return nil
}

func oinkBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Oink) error {
	*o = Oink{}
	return nil
}

func oinkAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Oink) error {
	*o = Oink{}
	return nil
}

func oinkBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Oink) error {
	*o = Oink{}
	return nil
}

func oinkAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Oink) error {
	*o = Oink{}
	return nil
}

func testOinksHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Oink{}
	o := &Oink{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, oinkDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Oink object: %s", err)
	}

	AddOinkHook(boil.BeforeInsertHook, oinkBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	oinkBeforeInsertHooks = []OinkHook{}

	AddOinkHook(boil.AfterInsertHook, oinkAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	oinkAfterInsertHooks = []OinkHook{}

	AddOinkHook(boil.AfterSelectHook, oinkAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	oinkAfterSelectHooks = []OinkHook{}

	AddOinkHook(boil.BeforeUpdateHook, oinkBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	oinkBeforeUpdateHooks = []OinkHook{}

	AddOinkHook(boil.AfterUpdateHook, oinkAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	oinkAfterUpdateHooks = []OinkHook{}

	AddOinkHook(boil.BeforeDeleteHook, oinkBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	oinkBeforeDeleteHooks = []OinkHook{}

	AddOinkHook(boil.AfterDeleteHook, oinkAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	oinkAfterDeleteHooks = []OinkHook{}

	AddOinkHook(boil.BeforeUpsertHook, oinkBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	oinkBeforeUpsertHooks = []OinkHook{}

	AddOinkHook(boil.AfterUpsertHook, oinkAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	oinkAfterUpsertHooks = []OinkHook{}
}

func testOinksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Oink{}
	if err = randomize.Struct(seed, o, oinkDBTypes, true, oinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Oink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Oinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOinksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Oink{}
	if err = randomize.Struct(seed, o, oinkDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Oink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(oinkColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Oinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOinkToOneUserUsingCreatorUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Oink
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, oinkDBTypes, false, oinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Oink struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.Creator = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.CreatorUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := OinkSlice{&local}
	if err = local.L.LoadCreatorUser(ctx, tx, false, (*[]*Oink)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CreatorUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.CreatorUser = nil
	if err = local.L.LoadCreatorUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CreatorUser == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testOinkToOneSetOpUserUsingCreatorUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Oink
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, oinkDBTypes, false, strmangle.SetComplement(oinkPrimaryKeyColumns, oinkColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetCreatorUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.CreatorUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CreatorOinks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Creator != x.ID {
			t.Error("foreign key was wrong value", a.Creator)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Creator))
		reflect.Indirect(reflect.ValueOf(&a.Creator)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Creator != x.ID {
			t.Error("foreign key was wrong value", a.Creator, x.ID)
		}
	}
}

func testOinksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Oink{}
	if err = randomize.Struct(seed, o, oinkDBTypes, true, oinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Oink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOinksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Oink{}
	if err = randomize.Struct(seed, o, oinkDBTypes, true, oinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Oink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OinkSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOinksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Oink{}
	if err = randomize.Struct(seed, o, oinkDBTypes, true, oinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Oink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Oinks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	oinkDBTypes = map[string]string{`Name`: `character varying`, `ID`: `uuid`, `Description`: `character varying`, `Creator`: `uuid`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`}
	_           = bytes.MinRead
)

func testOinksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(oinkPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(oinkAllColumns) == len(oinkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Oink{}
	if err = randomize.Struct(seed, o, oinkDBTypes, true, oinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Oink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Oinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, oinkDBTypes, true, oinkPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Oink struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOinksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(oinkAllColumns) == len(oinkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Oink{}
	if err = randomize.Struct(seed, o, oinkDBTypes, true, oinkColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Oink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Oinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, oinkDBTypes, true, oinkPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Oink struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(oinkAllColumns, oinkPrimaryKeyColumns) {
		fields = oinkAllColumns
	} else {
		fields = strmangle.SetComplement(
			oinkAllColumns,
			oinkPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OinkSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOinksUpsert(t *testing.T) {
	t.Parallel()

	if len(oinkAllColumns) == len(oinkPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Oink{}
	if err = randomize.Struct(seed, &o, oinkDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Oink struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Oink: %s", err)
	}

	count, err := Oinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, oinkDBTypes, false, oinkPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Oink struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Oink: %s", err)
	}

	count, err = Oinks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
